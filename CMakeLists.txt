message("--------------------------------------------- General info:")
unset(STATIC_ANALYZERS CACHE)
unset(STATIC_ANALYZER CACHE)
include(config.cmake)
set(STATIC_ANALYZERS "${STATIC_ANALYZER}" CACHE STRING "Turn ON or OFF for activ/deactive static analyzers (cppcheck and clang-tidy)")

set(CMAKE_CXX_COMPILER ${CPPCOMPILER})

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "$<0:>${CMAKE_BINARY_DIR}/bin/bin") # .exe and .dll
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "$<0:>${CMAKE_BINARY_DIR}/bin/lib") # .so and .dylib
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "$<0:>${CMAKE_BINARY_DIR}/bin/lib") # .lib and .a
#TODO:N1 ADD new build type for "RelWithDebInfo" and "MinSizeRel" maybe need change blew condition for appending these


if(CMAKE_BUILD_TYPE STREQUAL "Debug")
message("============================================= Debuging is ON (all Warnings are enable) ")
# set(BUILD_TYPE "Debug")
if(NOT ${CPPCOMPILER} STREQUAL "MSVC")
set(CUSTOME_FLAGS ${DEBUG_COMPILER_FLAGS_GCC_CLANG})
if(${CPPCOMPILER} STREQUAL "g++")
set(CUSTOME_FLAGS ${DEBUG_COMPILER_FLAGS_GCC_CLANG}${DEBUG_COMPILER_EXTRA_FLAGS_GCC})
endif(${CPPCOMPILER} STREQUAL "g++")
else()
set(CUSTOME_FLAGS ${DEBUG_COMPILER_FLAGS_MSVC})
endif(NOT ${CPPCOMPILER} STREQUAL "MSVC")
else()
message("============================================= Debuging is OFF (Release Mode with Full Optimization) ")
# set(BUILD_TYPE "Release")
if(NOT ${CPPCOMPILER} STREQUAL "MSVC")
set(CUSTOME_FLAGS ${RELEASE_COMPILER_FLAGS_GCC_CLANG})
else()
set(CUSTOME_FLAGS ${RELEASE_COMPILER_FLAGS_MSVC})
endif(NOT ${CPPCOMPILER} STREQUAL "MSVC")
endif()

find_program(CCACHE_FOUND ccache)
if(CCACHE_FOUND)
set(CMAKE_CXX_COMPILER_LAUNCHER ccache CACHE STRING "C++ compiler launcher")
message("--------------------------------------------- CCACHE: ON ")
set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)
endif()
add_compile_options(${CUSTOME_FLAGS})


cmake_minimum_required(VERSION                                  3.25)

#this build config is RELEASE OR DEBUG should set before project
# set (CMAKE_BUILD_TYPE ${BUILD_TYPE} CACHE STRING "Choose the type of build.")

project(${SULOTIONNAME}    VERSION ${PRVERSION}  LANGUAGES ${PRLANG})
set(CMAKE_CXX_EXTENSIONS                             ${CPPEXTENTION})
set(CMAKE_CXX_STANDARD                                 ${CPPVERSION})
set(CMAKE_CXX_STANDARD_REQUIRED                    ${CPPSTANDARDREQ})

if(STATIC_ANALYZERS STREQUAL "ON")
find_program(CMAKE_CXX_CPPCHECK NAMES cppcheck)
if(CMAKE_CXX_CPPCHECK)
message("--------------------------------------------- CPP-Check:  ON ")
list(APPEND CMAKE_CXX_CPPCHECK "--enable=all")
endif()
find_program(CLANG_TIDY_EXE NAMES "clang-tidy" REQUIRED)
if(CLANG_TIDY_EXE)
message("--------------------------------------------- CLANG-TIDY: ON ")
endif()
else()
message("--------------------------------------------- CPP-Check:  OFF ")
message("--------------------------------------------- CLANG-TIDY: OFF ")
endif()
set(BUILD_ARCH "" CACHE STRING "os architecture type")
message("--------------------------------------------- OS: ${MYOS} ")
if(CMAKE_SIZEOF_VOID_P EQUAL 8)
set(BUILD_ARCH "64-bit")
message("--------------------------------------------- Arch: ${BUILD_ARCH} ")
else()
set(BUILD_ARCH "32-bit")
message( "--------------------------------------------- Arch: ${BUILD_ARCH} ")
endif()
message("--------------------------------------------- COMPILER: ${CPPCOMPILER} ")
message("--------------------------------------------- BUILD TYPE: ${CMAKE_BUILD_TYPE}  ")
message("--------------------------------------------- Compiler Flags: ${CUSTOME_FLAGS} ")
message("--------------------------------------------- CXX Version: ${CPPVERSION} ")
message("--------------------------------------------- Sulotion name : ${SULOTIONNAME} ")
message("--------------------------------------------- Library name : ${MYLIBNAME} ")
message("--------------------------------------------- Exe name : ${PREXENAME} ")
message("--------------------------------------------- Version: ${PRVERSION} ")

if(${MYOS} STREQUAL ${WINDOWS})
message("============================================ OPERATING SYS :WINDOWS ")
set(CURRENTOS 1 CACHE STRING "OS TYPE ")
elseif(${MYOS} STREQUAL ${LINUXOS})
message("============================================ OPERATING SYS :Linux ")
set(CURRENTOS 2 CACHE STRING "OS TYPE ")
elseif(${MYOS} STREQUAL ${MACOS})
message("============================================ OPERATING SYS :MacOSX ")
set(CURRENTOS 3 CACHE STRING "OS TYPE ")
endif()

if(INTERNAL_MYLIB_USAGE)
add_subdirectory("source/src")
endif()
add_subdirectory("source/samples/src")