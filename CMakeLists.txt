message("--------------------------------------------- General info:")
include(${CMAKE_SOURCE_DIR}/cmake/config.cmake)
set(CMAKE_CXX_COMPILER ${CPPCOMPILER})

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "$<0:>${CMAKE_BINARY_DIR}/out/bin") # .exe and .dll
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "$<0:>${CMAKE_BINARY_DIR}/out/lib") # .so and .dylib
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "$<0:>${CMAKE_BINARY_DIR}/out/lib") # .lib and .a
#TODO:N1 ADD new build type for "RelWithDebInfo" and "MinSizeRel" maybe need change blew condition for appending these

if(CMAKE_BUILD_TYPE STREQUAL "Debug")
  if(ENABLE_WARNING)
    message("============================================= Debuging is ON (all Warnings are enable) ")
    # set(BUILD_TYPE "Debug")
    if(NOT ${CPPCOMPILER} STREQUAL "MSVC")
      set(CUSTOME_FLAGS ${DEBUG_COMPILER_FLAGS_GCC_CLANG})
      if(${CPPCOMPILER} STREQUAL "g++")
        set(CUSTOME_FLAGS ${DEBUG_COMPILER_FLAGS_GCC_CLANG}${DEBUG_COMPILER_EXTRA_FLAGS_GCC})
      endif(${CPPCOMPILER} STREQUAL "g++")
    else()
      set(CUSTOME_FLAGS ${DEBUG_COMPILER_FLAGS_MSVC})
    endif(NOT ${CPPCOMPILER} STREQUAL "MSVC")
  endif()
else()
  message(
    "============================================= Debuging is OFF (Release Mode with Full Optimization) "
  )
  # set(BUILD_TYPE "Release")
  if(NOT ${CPPCOMPILER} STREQUAL "MSVC")
    set(CUSTOME_FLAGS ${RELEASE_COMPILER_FLAGS_GCC_CLANG})
  else()
    set(CUSTOME_FLAGS ${RELEASE_COMPILER_FLAGS_MSVC})
  endif(NOT ${CPPCOMPILER} STREQUAL "MSVC")
endif()

find_program(CCACHE_FOUND ccache)
if(CCACHE_FOUND)
  set(CMAKE_CXX_COMPILER_LAUNCHER ccache CACHE STRING "C++ compiler launcher")
  message("--------------------------------------------- CCACHE: ON ")
  set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)
endif()

cmake_minimum_required(VERSION 3.30)

project(${SULOTIONNAME} VERSION ${PRVERSION} LANGUAGES ${PRLANG})
set(CMAKE_CXX_STANDARD ${CPPVERSION})
set(CMAKE_CXX_STANDARD_REQUIRED ${CPPSTANDARDREQ})
set(CMAKE_CXX_EXTENSIONS ${CPPEXTENTION})

set(BUILD_ARCH "" CACHE STRING "os architecture type")
message("--------------------------------------------- OS: ${MYOS} ")
if(CMAKE_SIZEOF_VOID_P EQUAL 8)
  set(BUILD_ARCH "64-bit")
  message("--------------------------------------------- Arch: ${BUILD_ARCH} ")
else()
  set(BUILD_ARCH "32-bit")
  message("--------------------------------------------- Arch: ${BUILD_ARCH} ")
endif()
message("--------------------------------------------- COMPILER ID: ${CMAKE_CXX_COMPILER_ID} ")
message("--------------------------------------------- COMPILER: ${CPPCOMPILER} ")
message("--------------------------------------------- BUILD TYPE: ${CMAKE_BUILD_TYPE}  ")
if(ENABLE_UNITYBUILD)
  message("--------------------------------------------- UNITY BUILD: ON ")
else()
  message("--------------------------------------------- UNITY BUILD: OFF ")
endif()
message("--------------------------------------------- Compiler Flags: ${CUSTOME_FLAGS} ")
message("--------------------------------------------- CXX Version: ${CPPVERSION} ")
message("--------------------------------------------- Sulotion name : ${SULOTIONNAME} ")
if(INTERNAL_MYLIB_USAGE)
  message("--------------------------------------------- Library name : ${MYLIBNAME} ")
endif()
message("--------------------------------------------- Exe name : ${PREXENAME} ")
message("--------------------------------------------- Version: ${PRVERSION} ")

if(${MYOS} STREQUAL ${WINDOWS})
  message("============================================ OPERATING SYS :WINDOWS ")
  set(CURRENTOS 1 CACHE STRING "OS TYPE ")
elseif(${MYOS} STREQUAL ${LINUXOS})
  message("============================================ OPERATING SYS :Linux ")
  set(CURRENTOS 2 CACHE STRING "OS TYPE ")
elseif(${MYOS} STREQUAL ${MACOS})
  message("============================================ OPERATING SYS :MacOSX ")
  set(CURRENTOS 3 CACHE STRING "OS TYPE ")
endif()

if(INTERNAL_MYLIB_USAGE)
  add_subdirectory("source/library")
endif()
add_subdirectory("source/sample")

# Don't even look at tests if we're not top level
if(NOT PROJECT_IS_TOP_LEVEL)
  return()
endif()

# Adding the tests:
if(ENABLE_TESTING)

  message("============================================ TESTING IS ON")
  enable_testing()
  list(APPEND CMAKE_MODULE_PATH ${catch2_SOURCE_DIR}/extras)
  add_subdirectory("test")

endif()
