# LIB
include(${CMAKE_HOME_DIRECTORY}/config.cmake)
include(src_files.cmake)
# include(CTest)
set(CMAKE_CXX_EXTENSIONS ${CPPEXTENTION})
set(CMAKE_CXX_STANDARD ${CPPVERSION})
set(CMAKE_CXX_STANDARD_REQUIRED ${CPPSTANDARDREQ})
project(${MYLIBNAME} VERSION ${PRVERSION} LANGUAGES ${PRLANG})
#if You want u can change it to SHARED
add_library(${MYLIBNAME} ${MYLIB_TYPE} ${src})
configure_file("../include/osconfig.h.in" "${CMAKE_CURRENT_BINARY_DIR}/generate/osconfig.h")

target_include_directories(${MYLIBNAME} PUBLIC "${CMAKE_CURRENT_BINARY_DIR}/generate" PUBLIC "../include")
target_precompile_headers(${MYLIBNAME} PUBLIC "../include/pch/pch.hpp")
target_compile_options(${MYLIBNAME} PRIVATE $<$<COMPILE_LANGUAGE:CXX>:${CUSTOME_FLAGS}>)
if(STATIC_ANALYZER)
  set_target_properties(${MYLIBNAME} PROPERTIES CXX_CLANG_TIDY "${CLANG_TIDY_EXE}")
endif()

if(${CPPCOMPILER} STREQUAL "clang++" OR ${CPPCOMPILER} STREQUAL "g++")
  if(ENABLE_SANITIZER)
    message("--------------------------------------------- SANITIZER IS ON IN LIB WITH: ${SANITIZERS}")
    target_compile_options(${MYLIBNAME} PRIVATE -fsanitize=${SANITIZERS})
    target_link_options(${MYLIBNAME} PRIVATE -fsanitize=${SANITIZERS})
  endif()
else()
  if(ENABLE_SANITIZER)
    message("(--------------------------------------------- SANITIZER IS ON IN LIB WITH: ${SANITIZERS}")
    target_compile_options(${MYLIBNAME} PRIVATE /fsanitize=${SANITIZERS} /INCREMENTAL:NO)
    target_link_options(${MYLIBNAME} PRIVATE /INCREMENTAL:NO)
  endif()
endif()
